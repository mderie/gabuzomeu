
; Purpose : program that prints its own source code ! Almost done, full material available soon...
; Still need to finetune the *Generator helper programs.
;
; Check the (ultra :) compact or the readable versions which are complete, the skeleton here below is just the placeholder
; The big number alternative is a shorter alternative than the readable one but it requires the usage of the -b | --big paramater
;
; So, based on this skeleton / canvas, three version exists so far :
;
; The compact, the big numbers and the readable ones ! They are sorted by souce code size
; The compact doesn't holds any space characters, the big number requires the -b | --big parameter and the readable is the full extent one
;
; This one can be run using the command : gabuzomeu --file="quine_compact.gbzm" --target="quine_c.gbzm" --Quine
; Then the result of the following "DOS command" FC /B quine_compact.gbzm quine_c.gbzm should be "FC: no differences encountered"
;
; The compact version use also shorter labels :)
;
; The cells usage is as follow : GA (data), BU & ZO (alternate lifts) & MEU (code)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Step 0 : define the "data" part
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; The data part can be generated using the DataGenerator, for example by using a given well chosen code part as input...
; Here below we used : DataAsCodeGenerator.exe --file="code_include.gbzm" where the file holds ":expand_loop_bu CALC MEU, #BUGA"

CALC GA, #MEUZOZO BIRD BU LIFT BU CALC GA, #BUZOBUBU BIRD ZO LIFT ZO CALC GA, #BUMEUZOGA BIRD BU LIFT BU CALC GA, #BUMEUGAGA BIRD ZO LIFT ZO CALC GA, #BUZOGABU BIRD BU LIFT BU CALC GA, #BUZOMEUZO BIRD ZO LIFT ZO CALC GA, #BUZOBUGA BIRD BU LIFT BU CALC GA, #BUBUMEUMEU BIRD ZO LIFT ZO CALC GA, #BUZOMEUGA BIRD BU LIFT BU CALC GA, #BUZOMEUMEU BIRD ZO LIFT ZO CALC GA, #BUZOMEUMEU BIRD BU LIFT BU CALC GA, #BUMEUGAGA BIRD ZO LIFT ZO CALC GA, #BUBUMEUMEU BIRD BU LIFT BU CALC GA, #BUZOGAZO BIRD ZO LIFT ZO CALC GA, #BUMEUBUBU BIRD BU LIFT BU CALC GA, #ZOGAGA BIRD ZO LIFT ZO CALC GA, #BUGAGAMEU BIRD BU LIFT BU CALC GA, #BUGAGABU BIRD ZO LIFT ZO CALC GA, #BUGAMEUGA BIRD BU LIFT BU CALC GA, #BUGAGAMEU BIRD ZO LIFT ZO CALC GA, #ZOGAGA BIRD BU LIFT BU CALC GA, #BUGAMEUBU BIRD ZO LIFT ZO CALC GA, #BUGABUBU BIRD BU LIFT BU CALC GA, #BUBUBUBU BIRD ZO LIFT ZO CALC GA, #ZOMEUGA BIRD BU LIFT BU CALC GA, #ZOGAGA BIRD ZO LIFT ZO CALC GA, #ZOGAMEU BIRD BU LIFT BU CALC GA, #BUGAGAZO BIRD ZO LIFT ZO CALC GA, #BUBUBUBU BIRD BU LIFT BU CALC GA, #BUGABUMEU BIRD ZO LIFT ZO
CALC GA, #BUGAGABU ; Care : the last one here can't be followed by BIRD & LIFT !

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Step 1 : we need to rewind the entire data structure
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:initial_rewind
HEAD BU, initial_rewind_bu
HEAD ZO, initial_rewind_zo
JUMP expand_loop ; End of the initial rewind

:initial_rewind_bu
LIFT BU
JUMP initial_rewind ; Continue the rewinding

:initial_rewind_zo
LIFT ZO
JUMP initial_rewind  ; Continue the rewinding

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Step 2 : now we will dump the expanded version of the data structure
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:expand_loop
CALC MEU, #BUGAGAMEUBUGAGABUBUGAMEUGABUGAGAMEUGAZOGAGABUGABUMEUBUGAGABUGAZOMEUGA ; = "CALC GA," We use here the default base !
DUMP MEU ; We could remove the big number support by "calculating" then dumping each byte, but this extends the real code part and so the length of the data to encode... [See the big numbers vs readable implementations]
BASE #BUGA
DUMP GA
BASE #BUGAGAGAGA

TAIL BU, expand_loop_bu
TAIL ZO, expand_loop_zo
JUMP final_rewind

:expand_loop_bu
CALC MEU, #BUGAGAZOBUGAZOBUBUBUGAZOBUGABUGAGAZOGAGABUGAGAZOBUBUBUBUGAZOGAGABUGAMEUBUBUGAMEUMEUBUBUBUZOBUGABUBUGAZOGAGABUGAGAZOBUBUBUBU ; = "BIRD BU LIFT BU" TODO: Add CR LF ? Remove spaces ?
DUMP MEU
LIFT BU
JUMP expand_loop

:expand_loop_zo
CALC MEU, #BUGAGAZOBUGAZOBUBUBUGAZOBUGABUGAGAZOGAGABUBUZOZOBUGAMEUMEUGAZOGAGABUGAMEUBUBUGAMEUMEUBUBUBUZOBUGABUBUGAZOGAGABUBUZOZOBUGAMEUMEU ; = "BIRD ZO LIFT ZO"
DUMP MEU
LIFT ZO
JUMP expand_loop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Step 3 : again we need a complete rewind
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:final_rewind
HEAD BU, final_rewind_bu
HEAD ZO, final_rewind_zo
JUMP compact_loop

:final_rewind_bu
LIFT BU
JUMP final_rewind

:final_rewind_zo
LIFT ZO
JUMP final_rewind

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Step 4 : finally we can dump the compacted version
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

:compact_loop

DUMP GA

TAIL BU, compact_loop_bu
TAIL ZO, compact_loop_zo
JUMP eof

:compact_loop_bu
LIFT BU
JUMP compact_loop

:compact_loop_zo
LIFT ZO
JUMP compact_loop

;;;;;;;;;;;;;;;;;;;;
; That's all folks !
;;;;;;;;;;;;;;;;;;;;

:eof
