
!=====================================================================
! Welcome to the GABUZOMEU grammar which is right-recursive on purpose
!
! Yet another esoteric programming language created by Sam in May 2020
!
! Inspired by the VBScript work of Vladimir Morozov vmoroz@hotmail.com
!
! USE GOLD PARSER BUILDER VERSION 2.1 OR LATER TO COMPILE THIS GRAMMAR
!=====================================================================

!=====================================
! General assumptions before parsing
!
! - Input stream will be uppercased
! - End of line comment starts with //
!=====================================

"Start Symbol" = <Program>

!==========
! Terminals
!==========

label = ':' {Letter}+
cell = 'GA' | 'BU' | 'ZO' | 'MEU'
litteral = '#' ('GA' | 'BU' | 'ZO' | 'MEU')+
  
!======
! Rulez
!======

<program> ::= <line_list>
           
<line_list> ::= <line> | <line> <line_list>

<line> ::= <instruction> | label

<instruction> ::= <last> | <jump> | <dump> | <pump> | <free> | <bird> | <lift> | <calc> | <head> | <tail> | <zero> | <else> | <gbzm> | <base>

<last> ::= 'LAST' label

<jump> ::= 'JUMP' label

<dump> ::= 'DUMP' cell

<pump> ::= 'PUMP' cell
        
<free> ::= 'FREE' cell

<bird> ::= 'BIRD' cell

<lift> ::= 'LIFT' cell

<calc> ::= 'CALC' cell ',' <expression>

<head> ::= 'HEAD' cell ',' label

<tail> ::= 'TAIL' cell ',' label

<zero> ::= 'ZERO' cell ',' label

<else> ::= 'ELSE' cell ',' label

<gbzm> ::= 'GBZM' cell ',' cell

<base> ::= 'BASE' cell | 'BASE' litteral ! Could be shorten ? 'BASE' (cell | litteral) is invalid :(

<expression> ::=  <term> '+' <expression> | <term> '-' <expression>  | <term> ! We don't care about the unary minus support...

<term> ::= <power> '*' <term> | <power> '/' <term> | <power> '%' <term> | <power> 

<power> ::= <factor> '^' <power> | <factor>

<factor> ::= '(' <expression> ')' | litteral | cell
